書籍目次テーブル(contents)から前後のコンテンツを取り出してみましょう。
なお、取り出す列名は別名として「前コンテンツ名」「現コンテンツ名」「次コンテンツ名」とし、
現ページのコンテンツコードについて昇順に並べるものとします。以下の空白を埋めて、SQL命令を完成させましょう。

問題
SELECT
	①
FROM
	(
		contents AS cp
	②
		contents AS cc
	ON
		③
	)
②
	contents AS cn
ON
	④
ORDER BY
	⑤
;

回答
-- 取得命令
SELECT
	-- 前のコンテンツ名
	cc.c_title AS 前コンテンツ名,
	-- 現在のコンテンツ名
	cp.c_title AS 現コンテンツ名,
	-- 次のコンテンツ名
	cn.c_title AS 次コンテンツ名
-- 取得元
FROM
	(
		-- 現在のコンテンツテーブル
		contents AS cp
	-- 現コンテンツと前コンテンツを取得するため、自己結合
	LEFT JOIN
		-- 前のコンテンツテーブル
		contents AS cc
	-- 結合条件
	ON
		-- 現在と前のコンテンツIDを結合
		cp.c_id = cc.next_id
	)
-- 現在と次のコンテンツテーブルを結合
LEFT JOIN
	-- 次のコンテンツテーブル
	contents AS cn
-- 結合条件
ON
	-- 現在と次のコンテンツテーブルを結合
	cn.c_id = cp.next_id
-- ソート
ORDER BY
	-- 現在のコンテンツIDを昇順
	cp.c_id ASC
;

kensyu=# -- 取得命令
kensyu=# SELECT
kensyu-#        -- 前のコンテンツ名
kensyu-#        cc.c_title AS 前コンテンツ名,
kensyu-#        -- 現在のコンテンツ名
kensyu-#        cp.c_title AS 現コンテンツ名,
kensyu-#        -- 次のコンテンツ名
kensyu-#        cn.c_title AS 次コンテンツ名
kensyu-# -- 取得元
kensyu-# FROM
kensyu-#        (
kensyu(#                -- 現在のコンテンツテーブル
kensyu(#                contents AS cp
kensyu(#        -- 現コンテンツと前コンテンツを取得するため、自己結合
kensyu(#        LEFT JOIN
kensyu(#                -- 前のコンテンツテーブル
kensyu(#                contents AS cc
kensyu(#        -- 結合条件
kensyu(#        ON
kensyu(#                -- 現在と前のコンテンツIDを結合
kensyu(#                cp.c_id = cc.next_id
kensyu(#        )
kensyu-# -- 現在と次のコンテンツテーブルを結合
kensyu-# LEFT JOIN
kensyu-#        -- 次のコンテンツテーブル
kensyu-#        contents AS cn
kensyu-# -- 結合条件
kensyu-# ON
kensyu-#        -- 現在と次のコンテンツテーブルを結合
kensyu-#        cn.c_id = cp.next_id
kensyu-# -- ソート
kensyu-# ORDER BY
kensyu-#        -- 現在のコンテンツIDを昇順
kensyu-#        cp.c_id ASC
kensyu-# ;
           前コンテンツ名           |           現コンテンツ名           |           次コンテンツ名
------------------------------------+------------------------------------+------------------------------------
                                    | SQLについて                        | データの取得1
 SQLについて                        | データの取得1                      | カラムの選択
 データの取得1                      | カラムの選択                       | WHERE句の記述
 カラムの選択                       | WHERE句の記述                      | NULLと空白の扱い
 WHERE句の記述                      | NULLと空白の扱い                   | あいまい検索
 NULLと空白の扱い                   | あいまい検索                       | 複数条件の連結（論理演算子）
 あいまい検索                       | 複数条件の連結（論理演算子）       | 重複レコードの除去
 複数条件の連結（論理演算子）       | 重複レコードの除去                 | データの取得2
 重複レコードの除去                 | データの取得2                      | 順位付け
 データの取得2                      | 順位付け                           | ソート
 順位付け                           | ソート                             | グルーピング
 ソート                             | グルーピング                       | グルーピング結果の絞り込み
 グルーピング                       | グルーピング結果の絞り込み         | クロス集計
 グルーピング結果の絞り込み         | クロス集計                         | サブクエリー
 クロス集計                         | サブクエリー                       | 演算子による集計
 サブクエリー                       | 演算子による集計                   | 複数表の結合
 演算子による集計                   | 複数表の結合                       | 更新系SQL
 複数表の結合                       | 更新系SQL                          | レコードを1件挿入する
 更新系SQL                          | レコードを1件挿入する              | サブクエリで複数レコードを挿入する
 レコードを1件挿入する              | サブクエリで複数レコードを挿入する | 全レコード一律の更新を行う
 サブクエリで複数レコードを挿入する | 全レコード一律の更新を行う         | 特定行の更新を行う
 全レコード一律の更新を行う         | 特定行の更新を行う                 | 特定レコードの削除を行う
 特定行の更新を行う                 | 特定レコードの削除を行う           | トランザクション
 特定レコードの削除を行う           | トランザクション                   | データベースの作成
 トランザクション                   | データベースの作成                 | データベースの作成／削除
 データベースの作成                 | データベースの作成／削除           | 制約条件
 データベースの作成／削除           | 制約条件                           | テーブルの作成／削除
 制約条件                           | テーブルの作成／削除               | テーブル情報の変更
 テーブルの作成／削除               | テーブル情報の変更                 | インデックスの作成／削除
 テーブル情報の変更                 | インデックスの作成／削除           |
(30 行)

テーブル全量
kensyu=# select * from contents;
 c_id |              c_title               | next_id
------+------------------------------------+---------
 A001 | SQLについて                        | A011
 A011 | データの取得1                      | A012
 A012 | カラムの選択                       | A013
 A013 | WHERE句の記述                      | A014
 A014 | NULLと空白の扱い                   | A015
 A015 | あいまい検索                       | A016
 A016 | 複数条件の連結（論理演算子）       | A017
 A017 | 重複レコードの除去                 | A021
 A021 | データの取得2                      | A022
 A022 | 順位付け                           | A023
 A023 | ソート                             | A024
 A024 | グルーピング                       | A025
 A025 | グルーピング結果の絞り込み         | A026
 A026 | クロス集計                         | A027
 A027 | サブクエリー                       | A028
 A028 | 演算子による集計                   | A029
 A029 | 複数表の結合                       | A031
 A031 | 更新系SQL                          | A032
 A032 | レコードを1件挿入する              | A033
 A033 | サブクエリで複数レコードを挿入する | A034
 A034 | 全レコード一律の更新を行う         | A035
 A035 | 特定行の更新を行う                 | A036
 A036 | 特定レコードの削除を行う           | A037
 A037 | トランザクション                   | A041
 A041 | データベースの作成                 | A042
 A042 | データベースの作成／削除           | A043
 A043 | 制約条件                           | A044
 A044 | テーブルの作成／削除               | A045
 A045 | テーブル情報の変更                 | A046
 A046 | インデックスの作成／削除           | A047
(30 行)
